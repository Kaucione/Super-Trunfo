#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_DE_CARTAS 32



//estrutura da carta
typedef struct {
    char nome_continente[32];
    char nome_Pais[32];
    char nome_estado[32];
    char nome_cidade[32];
    char cod_carta[32]; 
    int quant_populacao;
    int pontos_turisticos;
    double area;
    double PIB;
    double densidade_populacional;
    double PIB_per_capita;
    double super_poder; 
} Carta;

//Declaração das funções

void embaralhar(Carta cartas[], int quantidade);
void jogar(Carta cartas[], int quantidade);
void exibirCarta(Carta carta);
void escolher_atributo(int *atributo);
void cadastrarCartas(Carta cartas[], int *quantidade);
void CartasPadrao(Carta cartas[], int *quantidade);



//interface inicial
int main() {
    srand(time(NULL));
    Carta cartas[MAX_DE_CARTAS];
    int quantidade = 0;
    int opcao;

    do {
        printf("--------------------------------------------\n");
        printf("------  Bem-vindo ao Jogo Super Trunfo -----\n");
        printf("--------------------------------------------\n");
        printf("\nMenu:\n");
        printf("1 - Cadastrar cartas\n");
        printf("2 - Usar cartas padrão\n");
        printf("3 - Jogar\n");
        printf("4 - Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
    case 1:
        cadastrarCartas(cartas, &quantidade);
        break;
    case 2:
        CartasPadrao(cartas, &quantidade);
        printf("Cartas padrão carregadas!\n");
        break;
    case 3:
        if (quantidade == 0) {
            printf("Erro: Nenhuma carta cadastrada. Escolha a opção 1 ou 2 primeiro.\n");
        } else {
            jogar(cartas, quantidade);
        }
        break;
    case 4:
        printf("Saindo do jogo...\n");
        break;
    default:
        printf("Opção inválida! Tente novamente.\n");
}

}
while (opcao != 4);

}



//chamar a carta
void exibirCarta(Carta carta) {
    printf("\n-----------------------------------\n");
    printf("Código: %s\n", carta.cod_carta);
    printf("Cidade: %s - %s (%s)\n", carta.nome_cidade, carta.nome_estado, carta.nome_Pais);
    printf("População: %d\n", carta.quant_populacao);
    printf("Área: %.2lf km²\n", carta.area);
    printf("PIB: %.2lf\n", carta.PIB);
    printf("Pontos Turísticos: %d\n", carta.pontos_turisticos);
    printf("Densidade Populacional: %.2lf\n", carta.densidade_populacional);
    printf("PIB per capita: %.2lf\n", carta.PIB_per_capita);
    printf("Super Poder: %.2lf\n", carta.super_poder);
    printf("-----------------------------------\n");
}

void CartasPadrao(Carta cartas[], int *quantidade) {
    static Carta CartasPadrao[] = {
        {"África", "Egito", "Cairo", "Cairo", "A01", 9000000, 606, 300, 10, 14851.47, 3333.33, 333333.33},
        {"África", "África do Sul", "Cidade do Cabo", "Cidade do Cabo", "A02", 4000000, 400, 120, 20, 10000.00, 3000.00, 200000.00},
        {"América", "Brasil", "São Paulo", "São Paulo", "A03", 12000000, 1500, 450, 15, 80000.00, 6666.66, 150000.00},
        {"América", "Estados Unidos", "Califórnia", "Los Angeles", "A04", 4000000, 1300, 700, 12, 170000.00, 17000.00, 220000.00},
        {"Ásia", "Japão", "Tóquio", "Tóquio", "B01", 14000000, 900, 1500, 30, 100000.00, 7100.00, 300000.00},
        {"Europa", "França", "Paris", "Paris", "B02", 11000000, 105, 800, 10, 70000.00, 6363.63, 250000.00},
        {"Ásia", "China", "Pequim", "Pequim", "B03", 12000000, 1600, 2000, 25, 250000.00, 20833.33, 300000.00},
        {"América", "Argentina", "Buenos Aires", "Buenos Aires", "B04", 3000000, 200, 100, 8, 40000.00, 13333.33, 100000.00},
        {"América", "Chile", "Santiago", "Santiago", "C01", 15000000, 600, 150, 6, 50000.00, 10000.00, 100000.00},
        {"Europa", "Reino Unido", "Londres", "Londres", "C02", 9000000, 1500, 500, 20, 90000.00, 10000.00, 180000.00},
        {"Oceania", "Austrália", "Sydney", "Sydney", "C03", 5000000, 2500, 500, 25, 95000.00, 19000.00, 200000.00},
        {"América", "México", "Cidade do México", "Cidade do México", "C04", 9000000, 1500, 400, 15, 60000.00, 6666.66, 170000.00},
        {"África", "Marrocos", "Casablanca", "Casablanca", "D01", 3000000, 300, 80, 5, 25000.00, 8333.33, 50000.00},
        {"Europa", "Itália", "Roma", "Roma", "D02", 2500000, 500, 1200, 18, 95000.00, 38000.00, 150000.00},
        {"Ásia", "Índia", "Nova Délhi", "Nova Délhi", "D03", 13000000, 1200, 500, 28, 150000.00, 11538.46, 200000.00},
        {"América", "Canadá", "Toronto", "Toronto", "D04", 3000000, 900, 450, 12, 70000.00, 23333.33, 120000.00},
        {"África", "Quênia", "Nairobi", "Nairobi", "E01", 4000000, 500, 100, 5, 15000.00, 3750.00, 40000.00},
        {"América", "Peru", "Lima", "Lima", "E02", 8000000, 600, 300, 7, 35000.00, 4375.00, 90000.00},
        {"Ásia", "Indonésia", "Jacarta", "Jacarta", "E03", 10000000, 1000, 120, 18, 60000.00, 6000.00, 160000.00},
        {"Oceania", "Nova Zelândia", "Auckland", "Auckland", "E04", 1500000, 450, 60, 4, 50000.00, 33333.33, 70000.00},
        {"América", "Colômbia", "Bogotá", "Bogotá", "F01", 7000000, 450, 350, 10, 40000.00, 5714.28, 110000.00},
        {"Europa", "Espanha", "Madri", "Madri", "F02", 6500000, 600, 700, 20, 75000.00, 11538.46, 140000.00},
        {"África", "Nigéria", "Lagos", "Lagos", "F03", 14000000, 1000, 300, 22, 100000.00, 7142.85, 200000.00},
        {"Ásia", "Singapura", "Singapura", "Singapura", "F04", 5000000, 720, 2000, 30, 150000.00, 30000.00, 250000.00},
        {"América", "Cuba", "Havana", "Havana", "G01", 2200000, 550, 50, 8, 25000.00, 11363.63, 80000.00},
        {"Europa", "Alemanha", "Berlim", "Berlim", "G02", 3500000, 450, 900, 12, 70000.00, 20000.00, 130000.00},
        {"África", "Egito", "Alexandria", "Alexandria", "G03", 5000000, 1200, 250, 15, 50000.00, 10000.00, 120000.00},
        {"América", "Chile", "Valparaíso", "Valparaíso", "G04", 3500000, 400, 180, 8, 40000.00, 11428.57, 70000.00},
        {"Ásia", "Coreia do Sul", "Seul", "Seul", "H01", 9000000, 600, 1200, 35, 130000.00, 14444.44, 230000.00},
        {"Oceania", "Papua Nova Guiné", "Port Moresby", "Port Moresby", "H02", 500000, 200, 50, 3, 10000.00, 20000.00, 30000.00},
        {"América", "Venezuela", "Caracas", "Caracas", "H03", 3200000, 800, 120, 10, 35000.00, 10937.50, 60000.00},
        {"África", "Tanzânia", "Dar es Salaam", "Dar es Salaam", "H04", 5000000, 900, 150, 13, 20000.00, 4000.00, 50000.00},
    };
	//cartas cadastradas no sistema automaticamente

    for (int i = 0; i < MAX_DE_CARTAS; i++) {
        cartas[i] = CartasPadrao[i]; 
    }
    *quantidade = MAX_DE_CARTAS;
}

void escolher_atributo(int *atributo) {
    do {
        printf("Escolha um atributo:");
        printf(" (1) População, (2) Área em M², (3) PIB,  (4) Pontos Turísticos, (5) Densidade populacional, (6) Super Poder, (7) PIB per capita\n");
        scanf("%d", atributo);
        if (*atributo < 1 || *atributo > 7) {
            printf("Opção inválida. Escolha entre 1 e 7.\n");
        }
    } while (*atributo < 1 || *atributo > 7);
}

void cadastrarCartas(Carta cartas[], int *quantidade) {
    int nova_quantidade;
    printf("Quantas cartas deseja cadastrar? (Máximo %d) ", MAX_DE_CARTAS - *quantidade);
    scanf("%d", &nova_quantidade);

    if (*quantidade + nova_quantidade > MAX_DE_CARTAS) {
        nova_quantidade = MAX_DE_CARTAS - *quantidade;
    }
    
	//adicionar carta personalizada
	
    for (int i = *quantidade; i < *quantidade + nova_quantidade; i++) {
        printf("Cadastrar uma nova carta:\n");
        printf("Digite o codigo da carta: ");
        scanf("%s", cartas[i].cod_carta);
        printf("Digite o continente: ");
        scanf(" %31[^\n]", cartas[i].nome_continente);
        printf("Digite o país: ");
        scanf(" %31[^\n]", cartas[i].nome_Pais);
        printf("Digite o nome da cidade: ");
        scanf(" %31[^\n]", cartas[i].nome_cidade);
        printf("Digite a população: ");
        scanf("%d", &cartas[i].quant_populacao);
        printf("Digite a área (em km²): ");
        scanf("%lf", &cartas[i].area);
        printf("Digite o PIB: ");
        scanf("%lf", &cartas[i].PIB);
        printf("Digite o número de pontos turísticos: ");
        scanf("%d", &cartas[i].pontos_turisticos);
        printf("Digite a densidade populacional: ");
        scanf("%lf", &cartas[i].densidade_populacional);
        printf("Digite o PIB per capita: ");
        scanf("%lf", &cartas[i].PIB_per_capita);
        printf("Digite o super poder (valor arbitrário): ");
        scanf("%lf", &cartas[i].super_poder);
    }
    *quantidade += nova_quantidade;
}

void embaralhar(Carta cartas[], int quantidade) {
    for (int i = 0; i < quantidade; i++) {
        int j = rand() % quantidade; 
        Carta temp = cartas[i];
        cartas[i] = cartas[j];
        cartas[j] = temp;	
    }
}

void jogar(Carta cartas[], int quantidade) {
    if (quantidade < 2) {
        printf("Não há cartas suficientes para jogar.\n");
        return;
    }

    embaralhar(cartas, quantidade); // Embaralhar as cartas

    Carta jogadorCartas[MAX_DE_CARTAS / 2], computadorCartas[MAX_DE_CARTAS / 2];
    int rodadas = quantidade / 2;
    int pontosJogador = 0, pontosComputador = 0;

    // Distribuir cartas entre jogador e computador
    for (int i = 0; i < rodadas; i++) {
        jogadorCartas[i] = cartas[i];
        computadorCartas[i] = cartas[i + rodadas];
    }  

    for (int i = 0; i < rodadas; i++) {
        printf("\nRodada %d\n", i + 1);
        printf("Sua carta:");
        exibirCarta(jogadorCartas[i]);

        int atributo;
        escolher_atributo(&atributo);

        printf("\nCarta do computador:");
        exibirCarta(computadorCartas[i]);

        double valor_jogador = 0, valor_computador = 0;

        switch (atributo) {
            case 1: 
                valor_jogador = jogadorCartas[i].quant_populacao; 
                valor_computador = computadorCartas[i].quant_populacao; 
                break;
            case 2: 	
                valor_jogador = jogadorCartas[i].area; 
                valor_computador = computadorCartas[i].area; 
                break;
            case 3: 
                valor_jogador = jogadorCartas[i].PIB; 
                valor_computador = computadorCartas[i].PIB; 
                break;
            case 4: 
                valor_jogador = jogadorCartas[i].pontos_turisticos; 
                valor_computador = computadorCartas[i].pontos_turisticos; 
                break;
            case 5: 
                valor_jogador = jogadorCartas[i].densidade_populacional; 
                valor_computador = computadorCartas[i].densidade_populacional; 
                break;
            case 6: 
                valor_jogador = jogadorCartas[i].super_poder; 
                valor_computador = computadorCartas[i].super_poder; 
                break;
            case 7: 
                valor_jogador = jogadorCartas[i].PIB_per_capita; 
                valor_computador = computadorCartas[i].PIB_per_capita; 
                break;
        }

		//definir o ganhador

        if (valor_jogador > valor_computador) {
            printf("Você venceu a rodada!\n");
            pontosJogador++;
        } else if (valor_jogador < valor_computador) {
            printf("O computador venceu a rodada!\n");
            pontosComputador++;
        } else {
            printf("Empate na rodada!\n");
        }
    }

    printf("\nPontuação final: Você %d x %d Computador\n", pontosJogador, pontosComputador);
    if (pontosJogador > pontosComputador) {
        printf("Parabéns, você venceu!\n");
    } else if (pontosJogador < pontosComputador) {
        printf("O computador venceu! Melhor sorte na próxima vez.\n");
    } else {
        printf("Foi um empate!\n");
    }
}

